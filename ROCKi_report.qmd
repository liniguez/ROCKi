---
title: "ROCKi"
author: "Luis P Iniguez"
format: 
  html:
    embed-resources: true
editor: visual
toc: true
number-sections: true
execute: 
  echo: false
  cache: true
  warning: false
---

```{r Setup,collapse=T,warning=FALSE, message=F}
#| context: setup
#| include: false

library(BiocManager)
options(repos = BiocManager::repositories())

library(tidyverse)
library(dplyr)
library(PCAtools)
library(DESeq2)
library(EnhancedVolcano)
library(cowplot)
library(ComplexHeatmap)
library(viridis)
library(data.table)
library(org.Mm.eg.db)
library(clusterProfiler)
library(pathview)
library(fgsea)
library(DT)
library(patchwork)
library(pals)
library(ggplot2)
library(enrichplot)
library(UpSetR)
library(kableExtra)
library(GO.db)
library(GSVA)
library(gage)
library(AnnotationDbi)
library(circlize)
library(ggforce)
library(ggsignif)
library(ReactomePA)
library(impute)
library(broom)
library(ggpubr)
library(IHW)
library(data.tree)
library(rrvgo)
library(ggrepel)
library(igraph)
library(ggraph)
library(ggridges)



source("../functions_utils.r")

```

## Samples

```{r}
coldata_raw<-read.delim("../neu_act_ROCK_inhibitor/samples.txt", row.names = 1)
coldata<-coldata_raw %>% as_tibble() %>% dplyr::select(SampleName,Genotype,Treatment)%>%
                  mutate(Genotype=factor(Genotype,levels=c("WT","KO")),
                         Treatment=factor(Treatment,levels=c("Veh","ROCKi")),
                         Group=factor(paste0(Genotype,"_",Treatment),
                                      levels=c("WT_Veh","KO_Veh","WT_ROCKi","KO_ROCKi")),
                         SampleName=factor(SampleName,levels = c(paste0("WT",1:3,"_Veh"),
                                                                 paste0("KO",1:3,"_Veh"),
                                                                 paste0("WT",1:3,"_ROCKi"),
                                                                 paste0("KO",1:3,"_ROCKi"))))

```

```{r Read,collapse=T,warning=FALSE,message=F,eval=TRUE}
gcounts<-read.csv("../neu_act_ROCK_inhibitor/Salmon_Gene_table_counts.csv",row.names = 1)
gcounts<-gcounts[,coldata_raw$SampleName]

gtpm<-read.csv("../neu_act_ROCK_inhibitor/Salmon_Gene_table_TPM.csv",row.names = 1)
gtpm<-gtpm[,coldata_raw$SampleName]
rowM_gtpm<-rowMeans(gtpm)

res <- AnnotationDbi::select(org.Mm.eg.db,
                             keys = rownames(gcounts),
                             keytype = "ENSEMBL",
                             columns = c("ENSEMBL", "SYMBOL","ENTREZID"))
#gcounts_means <- rowMeans(gcounts[,-1])

gcounts_entrez<- gcounts %>% as_tibble(rownames = "ENSEMBL") %>%
  full_join(res, by="ENSEMBL") %>%
  filter(!is.na(ENTREZID)) %>%
  dplyr::select(ENTREZID, ends_with("Veh"), ends_with("ROCKi"))
gcounts_entrez<-aggregate(.~ENTREZID, gcounts_entrez, sum) %>% column_to_rownames("ENTREZID")


coldata$ReadsMapped<-colSums(gcounts)
datatable(coldata, extensions = "Buttons",
          options = list(paging = TRUE,
                           scrollX=TRUE, 
                           searching = TRUE,
                           ordering = TRUE,
                           dom = 'Bfrtip',
                           buttons = c( 'csv', 'excel'),
                           pageLength=5, 
                           lengthMenu=c(3,5,10) ))


```

## Check for KO of the MIC

MIC inclusion:

```{r}
events<-read.delim("../neu_act_ROCK_inhibitor/INCLUSION_LEVELS_FULL-mm10-12.tab")%>%
  removeNonly() %>% filter(grepl("EX",EVENT))%>%
  dplyr::select(!ends_with(".Q")) %>%
  dplyr::select(!GENE) %>% dplyr::select(!COORD) %>%
  dplyr::select(!(FullCO:COMPLEX)) %>%
  pivot_longer(-c(EVENT,LENGTH), names_to = "sample", values_to = "PSI",values_drop_na = T)

events %>% filter(EVENT=="MmuEX0013683") %>% right_join(coldata,by=c("sample"="SampleName")) %>% ggplot(aes(x=Group,y=PSI))+geom_jitter(width = 0.2,height = 0,aes(color=Group), size=3)+ theme_cowplot(12)+ggtitle("Daam1-MIC")+scale_color_manual(values = colorList$Group_neu)
```

::: callout-note
Two points from the WTs, one in each group, are not plotted since the junction coverage is not enough to calculate PSI.
:::

## PCA

In order to consider a gene for further analysis, it must be expressed \>20 reads in all 3 replicates from the at least a group. Points are colored based on the sample group, as the PSI plot.

```{r PCA_cor_fadista,echo=FALSE,message=FALSE, warning=F}
#| fig-width: 10
#| fig-height: 10

minrep<-3
minreads<-20


pregene2use<-gcounts %>% as_tibble(rownames = "ID") %>%
              pivot_longer(-ID, names_to = "SampleName", values_to = "counts") %>%
              left_join(coldata, by="SampleName") %>% filter(counts>=minreads) %>%
              group_by(Group,ID) %>% reframe(N=n())
genes2use<- pregene2use%>% filter(N>=minrep) %>% .$ID %>% unique()
pregene2use<-pregene2use %>% pivot_wider(id_cols = ID,names_from = Group,values_from = N,values_fill = 0)


gcounts_filt<-gcounts[genes2use,]


p <- pca(log10(gcounts_filt+1),scale = T,
         metadata = data.frame(coldata,row.names  =coldata$SampleName))
pairsplot(p, colby = "Group", colkey = colorList$Group_neu,pointSize = 3)
```

As it can be appreciated it is not clear the groups cluster together.

> *"I guess, we can also say that PC2 loosely and dirtily separates ROCKi vs Veh"* (Manu, 15/08/2023)

I would rather say that PC2 kind of separates KO Veh from the rest of the samples, but it is not that clear:

```{r}
biplot(p,colby = "Group", colkey = colorList$Group_neu,pointSize = 3,encircle = TRUE,
      encircleFill = TRUE, x="PC2", y="PC3")
```

```{r}
geneName <- AnnotationDbi::select(org.Mm.eg.db, keys= rownames(gcounts), keytype = "ENSEMBL", columns = c("ENTREZID","SYMBOL","ENSEMBL")) %>% as_tibble()
```

## Multiple comparisons

As in a control-genotype + treatment experiment many comparisons can be calculated. Let's first start with WT + Veh as the reference and identify how many genes are differentially expressed. For comparisons of two groups IHW was used for correcting p-values and apeglm for log2fold change shrinkage. Genes were considered differentially expressed if corrected p-value \<0.1 disregarding the corrected log2foldchange.

```{r DE_fadista,echo=FALSE,message=FALSE, warning=FALSE}
dds<-DESeqDataSetFromMatrix(gcounts_filt,
                                    colData = data.frame(coldata,row.names = "SampleName"),
                                    design = ~ Group)
dds$Group<-relevel(dds$Group, ref = "WT_Veh")
dds<-DESeq(dds)

vsd<-vst(dds,blind = FALSE)%>% assay()
tmp<-vsd %>% as_tibble(rownames="ENSEMBL") %>% left_join(geneName,by=c("ENSEMBL"))
tmp$SYMBOL[is.na(tmp$SYMBOL)] <- tmp$ENSEMBL[is.na(tmp$SYMBOL)]

nrmcnts<-counts(dds,normalized=T) %>%
  as_tibble(rownames="ENSEMBL") %>%
  pivot_longer(-c(ENSEMBL),names_to ="Sample",values_to = "normCounts") 

vst4plts<-tmp %>% pivot_longer(-c(ENSEMBL,ENTREZID,SYMBOL),names_to = "Sample",values_to = "TPM") %>% left_join(nrmcnts,by=c("Sample","ENSEMBL")) %>% left_join(coldata, by=c("Sample"="SampleName"))

kovswt_Veh_res<-results(dds, name="Group_KO_Veh_vs_WT_Veh",filterFun=ihw,cooksCutoff = FALSE)
kovswt_Veh_res_lfc<-  lfcShrink(dds, res =kovswt_Veh_res, type="apeglm", coef="Group_KO_Veh_vs_WT_Veh") %>%
                                as_tibble(rownames = "row") %>% left_join(pregene2use, by=c("row"="ID")) %>%
                                mutate(keep=ifelse(KO_Veh>=minrep|WT_Veh>=minrep,TRUE,FALSE))%>%
                                dplyr::select(row,baseMean,log2FoldChange,lfcSE,pvalue,padj,keep)

rvsv_WT_res<-results(dds, name="Group_WT_ROCKi_vs_WT_Veh",filterFun=ihw,cooksCutoff = FALSE)
rvsv_WT_res_lfc<- lfcShrink(dds, res =rvsv_WT_res,coef="Group_WT_ROCKi_vs_WT_Veh", type="apeglm") %>%
                                as_tibble(rownames = "row") %>% left_join(pregene2use, by=c("row"="ID")) %>%
                                mutate(keep=ifelse(WT_ROCKi>=minrep|WT_Veh>=minrep,TRUE,FALSE))%>%
                                dplyr::select(row,baseMean,log2FoldChange,lfcSE,pvalue,padj,keep)

rvsv_KOWT_res<-results(dds, name="Group_KO_ROCKi_vs_WT_Veh",filterFun=ihw,cooksCutoff = FALSE)
rvsv_KOWT_res_lfc<- lfcShrink(dds, res =rvsv_KOWT_res,coef="Group_KO_ROCKi_vs_WT_Veh", type="apeglm") %>%
                                as_tibble(rownames = "row") %>% left_join(pregene2use, by=c("row"="ID")) %>%
                                mutate(keep=ifelse(KO_ROCKi>=minrep|WT_Veh>=minrep,TRUE,FALSE))%>%
                                dplyr::select(row,baseMean,log2FoldChange,lfcSE,pvalue,padj,keep)


cook_a<-mcols(dds)$maxCooks 
```

#### KO Veh vs WT Veh

Only 37 genes differentially expressed

```{r}

kovswt_Veh_res_lfc %>%  filter(padj<0.1 ) %>%
  left_join(geneName,by=c("row"="ENSEMBL")) %>%
  dplyr::select(row,SYMBOL,baseMean,log2FoldChange,lfcSE,pvalue,padj) %>%
  arrange(padj)%>% unique() %>%
  datatable(extensions = "Buttons",
          options = list(paging = TRUE,
                           scrollX=TRUE, 
                           searching = TRUE,
                           ordering = TRUE,
                           dom = 'Bfrtip',
                           buttons = c( 'csv', 'excel'),
                           pageLength=5, 
                           lengthMenu=c(3,5,10) ))

```

#### WT ROCKi vs WT Veh

As identified by Manu, there are no big differences, here I just could identify a single gene:

```{r}
rvsv_WT_res_lfc %>%  filter(padj<0.1 ) %>%
  left_join(geneName,by=c("row"="ENSEMBL")) %>%
  dplyr::select(row,SYMBOL,baseMean,log2FoldChange,lfcSE,pvalue,padj) %>%
  arrange(padj)%>% unique() %>%
  datatable(extensions = "Buttons",
          options = list(paging = TRUE,
                           scrollX=TRUE, 
                           searching = TRUE,
                           ordering = TRUE,
                           dom = 'Bfrtip',
                           buttons = c( 'csv', 'excel'),
                           pageLength=5, 
                           lengthMenu=c(3,5,10) ))
```

#### KO ROCKi vs KO Veh

Here the reference changes and now is the KO treated with Veh, this was done to identify genes that their transcription rate changed with the ROCKi. Unfortunatly only one showed statistical differences.

```{r DE_fadista_res_caca,echo=FALSE,message=FALSE, warning=FALSE}

dds$Group<-relevel(dds$Group, ref = "KO_Veh")
dds<-DESeq(dds)

rvsv_KO_res<-results(dds, name="Group_KO_ROCKi_vs_KO_Veh",filterFun=ihw,cooksCutoff = FALSE)
rvsv_KO_res_lfc<- lfcShrink(dds, res =rvsv_KO_res,coef="Group_KO_ROCKi_vs_KO_Veh", type="apeglm") %>%
                                as_tibble(rownames = "row") %>% left_join(pregene2use, by=c("row"="ID")) %>%
                                mutate(keep=ifelse(KO_ROCKi>=minrep|KO_Veh>=minrep,TRUE,FALSE))%>%
                                dplyr::select(row,baseMean,log2FoldChange,lfcSE,pvalue,padj,keep)

rvsv_WTKO_res<-results(dds, name="Group_WT_ROCKi_vs_KO_Veh",filterFun=ihw,cooksCutoff = FALSE)
rvsv_WTKO_res_lfc<- lfcShrink(dds, res =rvsv_WTKO_res,coef="Group_WT_ROCKi_vs_KO_Veh", type="apeglm") %>%
                                as_tibble(rownames = "row") %>% left_join(pregene2use, by=c("row"="ID")) %>%
                                mutate(keep=ifelse(WT_ROCKi>=minrep|KO_Veh>=minrep,TRUE,FALSE))%>%
                                dplyr::select(row,baseMean,log2FoldChange,lfcSE,pvalue,padj,keep)

cook_b<-mcols(dds)$maxCooks 

```

```{r}
rvsv_KO_res_lfc %>%  filter(padj<0.1 ) %>%
  left_join(geneName,by=c("row"="ENSEMBL")) %>%
  dplyr::select(row,SYMBOL,baseMean,log2FoldChange,lfcSE,pvalue,padj) %>%
  arrange(padj)%>% unique() %>%
  datatable(extensions = "Buttons",
          options = list(paging = TRUE,
                           scrollX=TRUE, 
                           searching = TRUE,
                           ordering = TRUE,
                           dom = 'Bfrtip',
                           buttons = c( 'csv', 'excel'),
                           pageLength=5, 
                           lengthMenu=c(3,5,10) ))


```

```{r}
dds$Group<-relevel(dds$Group, ref = "KO_ROCKi")
dds<-DESeq(dds)

wtvsko_ROCKi_res<-results(dds, name="Group_WT_ROCKi_vs_KO_ROCKi",filterFun=ihw,cooksCutoff = FALSE)
wtvsko_ROCKi_res_lfc<- lfcShrink(dds, res =wtvsko_ROCKi_res,coef="Group_WT_ROCKi_vs_KO_ROCKi", type="apeglm") %>%
                                as_tibble(rownames = "row") %>% left_join(pregene2use, by=c("row"="ID")) %>%
                                mutate(keep=ifelse(WT_ROCKi>=minrep|KO_ROCKi>=minrep,TRUE,FALSE))%>%
                                dplyr::select(row,baseMean,log2FoldChange,lfcSE,pvalue,padj,keep)

```

```{r DE_fadista_res_cca2,echo=FALSE,message=FALSE, warning=FALSE}

dds_LRT<-DESeq(dds,test = "LRT",reduced = ~1)
res_LRT<- results(dds_LRT,cooksCutoff = FALSE) 
res_LRT_iwh<-ihw(res_LRT)%>% as_tibble(rownames = "row")

```

## KO changes

We could then use the samples to identify genes which expression is change in the KO disregarding the treatment. For this we used a model \~ Genotype + Treatment and looked for differences between WT and KO. Using same parameters as before I get 134 genes, which are plotted in the heatmap.

```{r DE_fadista_res,echo=FALSE,message=FALSE, warning=FALSE}

dds_4gen<-DESeqDataSetFromMatrix(gcounts_filt,
                                    colData = data.frame(coldata,row.names = "SampleName"),
                                    design = ~ Genotype + Treatment )
dds_4gen$Genotype<-relevel(dds_4gen$Genotype, ref = "WT")
dds_4gen<-DESeq(dds_4gen)

```

```{r}
genresults<-results(dds_4gen,name = "Genotype_KO_vs_WT",filterFun=ihw,cooksCutoff = FALSE)
genresults<-lfcShrink(dds_4gen,coef = "Genotype_KO_vs_WT",res = genresults, type="apeglm")%>% as_tibble(rownames="IDs")
DEG4gen<-genresults  %>% filter(padj<0.1) %>% .$IDs

DEG4gen_pos<-genresults %>% filter(padj<0.1 & log2FoldChange>0) %>% .$IDs
DEG4gen_neg<-genresults %>% filter(padj<0.1 & log2FoldChange<0) %>% .$IDs


(vst(dds,blind=FALSE) %>% assay())[DEG4gen,levels(coldata$SampleName)] %>%
  pheatmap::pheatmap(scale = "row",cluster_cols = FALSE, show_rownames = FALSE,border_color = NA)

```

### GO enrichment

#### Biological Process

Bubbles represent significant enriched GO terms, alpha and size show significance. Terms are grouped with Wang distance into bubbles unfilled. Most significant term is shown as label.

```{r}
DEG4gensynonyms<-geneName %>% filter(ENSEMBL %in% DEG4gen)
mmuGO <- GOSemSim::godata("org.Mm.eg.db", ont = "BP", keytype = "ENSEMBL")
mmuGO_MF <- GOSemSim::godata("org.Mm.eg.db", ont = "MF", keytype = "ENSEMBL")

resGO_DEG4gen<-enrichGO(unique(DEG4gensynonyms$ENSEMBL),keyType = "ENSEMBL",
                       ont="BP",OrgDb = org.Mm.eg.db,readable = T,minGSSize = 10, maxGSSize = 200)
resGO_DEG4gen_sig<-resGO_DEG4gen@result %>% filter(p.adjust<0.05)
simMatrix <- calculateSimMatrix(resGO_DEG4gen_sig$ID,semdata = mmuGO,orgdb = "org.Mm.eg.db",
                                method="Wang")

scores <- setNames(-log10(resGO_DEG4gen_sig$p.adjust), resGO_DEG4gen_sig$ID)
reducedTerms <- reduceSimMatrix(simMatrix,
                                scores,
                                threshold=0.7,
                                orgdb="org.Mm.eg.db")


#treemapPlot(reducedTerms,size ="score" )

edges_Temp<-reducedTerms %>%  mutate("from"=parent, "to"=paste0(parent,".",go),parentTerm=factor(parentTerm))

vert_Temp<-data.frame(name=edges_Temp$to, scores=edges_Temp$score,"Description"=edges_Temp$term,"pterm"=edges_Temp$parentTerm)
vert_Temp2<-edges_Temp %>%filter(go==parent) %>% dplyr::select(parent,score,term,parentTerm)
colnames(vert_Temp2)<-c("name","scores","Description","pterm")

edges_Temp2<-data.frame("from"="Origine", "to"=vert_Temp2$name)
vert_Temp<-rbind(vert_Temp,vert_Temp2,c("name"="Origine","scores"=Inf,"Description"=NA,"pterm"=NA))
edges_Temp<-rbind(edges_Temp[,c("from","to")],edges_Temp2)
vert_Temp$scores<-as.numeric(vert_Temp$scores)
tree <- FromDataFrameNetwork(edges_Temp)
mylevels <- data.frame( name=tree$Get('name'), level=tree$Get("level") )
vert_Temp <- vert_Temp %>% left_join(mylevels, by="name") %>%
              mutate(new_label=ifelse(level==2, Description, NA))

edges_Temp<-edges_Temp %>% filter(from!="Origine")
vert_Temp<-vert_Temp %>% filter(name != "Origine")

vert_Temp<-vert_Temp %>% mutate(scores4alpha=ifelse(level==2,0,
                                                    ifelse(scores>5,5,
                                                           ifelse(scores>4,4,
                                                                  ifelse(scores>3,3,
                                                                         ifelse(scores>2,2,1))))),
                                scores4alpha=factor(scores4alpha))

mygraph <- graph_from_data_frame( edges_Temp[,c("from","to")], vertices=vert_Temp)




# ggraph(mygraph, 'treemap', weight = scores) +
#   geom_node_tile(aes(fill = pterm, alpha =scores4alpha), color="white", linewidth=1) +
#   geom_node_tile(aes(color = as.factor(as.numeric(!is.na(new_label))),
#                      linewidth=as.factor(as.numeric(!is.na(new_label)))),fill=NA) +
#   geom_node_label( aes(label=new_label), size=3,repel = T)+
#   guides(size="none",alpha="none")+
#   scale_alpha_manual(values = c("0"=0,"1"=0.2,"2"=0.4,"3"=0.6,"4"=0.8,"5"=1),guide="none")+
#     scale_fill_manual(values=pals::cubicl(length(levels(vert_Temp$pterm))), guide="none")+
#   scale_color_manual(values=c("0"="white","1"="black"), guide="none")+
#   scale_linewidth_manual(values=c("0"=0,"1"=1), guide="none")+
#   theme_void() +
#   theme(legend.position="none")


```

```{r,fig.width=10,fig.height=10}
ggraph(mygraph, layout = 'circlepack',weight=scores) + 
  geom_node_circle(aes(fill = pterm, alpha =scores4alpha, color=pterm)) +
  geom_node_label( aes(label=new_label), size=4,repel = T)+
  scale_alpha_manual(values = c("0"=0,"1"=0.2,"2"=0.4,"3"=0.6,"4"=0.8,"5"=1),guide="none")+
  scale_fill_manual(values=pals::cubicl(length(levels(vert_Temp$pterm))), guide="none")+
  scale_color_manual(values=pals::cubicl(length(levels(vert_Temp$pterm))), guide="none")+
  theme_void()
```

```{r}
resGO_DEG4gen_sig %>% as_tibble() %>% left_join(reducedTerms, by=c("ID"="go")) %>% dplyr::select(ID,Description,GeneRatio,pvalue,p.adjust,cluster,parentTerm,geneID) %>%
  datatable(extensions = "Buttons",
          options = list(paging = TRUE,
                           scrollX=TRUE, 
                           searching = TRUE,
                           ordering = TRUE,
                           dom = 'Bfrtip',
                           buttons = c( 'csv', 'excel'),
                           pageLength=5, 
                           lengthMenu=c(3,5,10) ))
```

#### Molecular Function

```{r}
resGOMF_DEG4gen<-enrichGO(unique(DEG4gensynonyms$ENSEMBL),keyType = "ENSEMBL",
                       ont="MF",OrgDb = org.Mm.eg.db,readable = T,minGSSize = 10, maxGSSize = 200)

dotplot(resGOMF_DEG4gen,showCategory=Inf)
```

```{r}
resGOMF_DEG4gen_sig<-resGOMF_DEG4gen@result %>% filter(p.adjust<0.05)
resGOMF_DEG4gen_sig %>% as_tibble() %>%
  dplyr::select(ID,Description,GeneRatio,pvalue,p.adjust) %>%
  datatable(extensions = "Buttons",
          options = list(paging = TRUE,
                           scrollX=TRUE, 
                           searching = TRUE,
                           ordering = TRUE,
                           dom = 'Bfrtip',
                           buttons = c( 'csv', 'excel'),
                           pageLength=5, 
                           lengthMenu=c(3,5,10) ))

```

### KEGG enrichment

```{r}
resKEGG_DEG4gen<-enrichKEGG(unique(DEG4gensynonyms$ENTREZID),keyType = "ncbi-geneid", organism = "mmu", minGSSize = 10, maxGSSize = 200)
dotplot(resKEGG_DEG4gen,showCategory=Inf)

```

```{r}
resKEGG_DEG4gen_sig<-resKEGG_DEG4gen@result %>% filter(p.adjust<0.05)
resKEGG_DEG4gen_sig %>% as_tibble() %>%
  dplyr::select(ID,Description,GeneRatio,pvalue,p.adjust) %>%
  datatable(extensions = "Buttons",
          options = list(paging = TRUE,
                           scrollX=TRUE, 
                           searching = TRUE,
                           ordering = TRUE,
                           dom = 'Bfrtip',
                           buttons = c( 'csv', 'excel'),
                           pageLength=5, 
                           lengthMenu=c(3,5,10) ))

```

## Treatment changes

Similar as with the KO changes I tested then if disrigarding the genotype we could identify transcriptional changes related to the ROCKi treatment. As expected from the comparison WT ROCKi vs WT Veh not many genes showed differential expression, only one.

```{r}
treatresults<-results(dds_4gen,name = "Treatment_ROCKi_vs_Veh",filterFun=ihw,cooksCutoff = FALSE)
treatresults<-lfcShrink(dds_4gen,coef = "Treatment_ROCKi_vs_Veh",res = treatresults, type="apeglm")%>% as_tibble(rownames="IDs") 
DEG4treat<-treatresults %>% filter(padj<0.1) %>% .$IDs

vst4plts %>% filter(ENSEMBL==DEG4treat) %>%
  ggplot(aes(x=Group, y=TPM))+
  geom_boxplot(aes(fill=Group),outlier.shape = NA)+
  geom_jitter(width = 0.2,height = 0) + facet_grid(~SYMBOL) +
  labs(y="VST")+
  scale_fill_manual(values = colorList$Group_neu,guide="none")+
  theme_cowplot(12)+
  theme(axis.text.x = element_text(angle = 30,hjust = 1),
        axis.title.x  = element_blank())


```

In order to explore further ROCKi, here is the KEGG pathway "Regulation of actin cytoskeleton" where ROCK plays an important role. It is wroth to mention that ROCK acts at the level of proteins,phosphorylating its targets. As appreciated no changes are observed!!!

```{r}

keggmmu<-kegg.gsets(species = "mmu",id.type = "entrez")

treatresults_temp<-treatresults %>% 
                      left_join(geneName, by=c("IDs"="ENSEMBL")) %>%
                      select(ENTREZID,log2FoldChange) %>%
                      group_by(ENTREZID) %>% reframe(log2FoldChange=mean(log2FoldChange)) %>%
                      filter(ENTREZID != '') %>% column_to_rownames("ENTREZID")

treatresults_temp_vect<-setNames(treatresults_temp$log2FoldChange,rownames(treatresults_temp))
treatresults_temp_vect<-sort(treatresults_temp_vect)

gsea_kegg_res<-fgsea(keggmmu$kg.sets,maxSize = 200,stats = treatresults_temp_vect,eps =0, minSize = 10)

pathview(gene.data =treatresults_temp,
         pathway.id ="04810", split.group = F,node.sum="sum",
                   species = "mmu", out.suffix = "treatment", kegg.native = T,limit = c(-0.1,0.1),
                   kegg.dir = ".",
                   low=list("gene"="blue","cpd"="blue"),
                   mid=list("gene"="gold","cpd"="gold"),
                   high=list("gene"="red","cpd"="red"))

```

![](mmu04810.treatment.png)

## Merging comparisons.

With Patryk's mail I got inspired to look for specific patterns,as the one he was pointing out, which are not being recovered in the previous analysis. I thought with the differential expression analysis I could get there, but with the stringent (I tried more relaxed ones with similar results) parameters I used, very very very few genes were found differentially expressed and almost no overlap between lists (if any). Looking at the raw p-values I realized that some genes presented low p-values for multiple comparisons but when adjusting them significance is lost. Since I was looking for a specific pattern where multiple comparisons need to be combined I found a couple of ways for summarizing multiple p-values (from independent tests) into one ([more info here](https://en.wikipedia.org/wiki/Fisher%27s_method)).

-   Patterns to look for (NOT FILTERS):

    -   KO mimicking; ROCKi shifts WT expression in Veh into KO.

        \- WT vs KO should be different treated with Veh

        \- Veh vs ROCKi should be equal in KO ( therefore WT Veh vs KO ROCKi should be different) \*\*

        \- Veh vs ROCKi should be different in WT (same direction as WT vs KO)

        ![](images/case_g29063_Case.png)

    -   KO rescue; ROCKi shifts KO expression in Veh into WT.

        \- WT vs KO should be different treated with Veh

        \- Veh vs ROCKi should be different in KO (same direction as WT vs KO)

        \- Veh vs ROCKi should be equal in WT ( therefore KO Veh vs WT ROCKi should be different) \*\*

        ![](images/case_g29213_Case.png)

::: callout-important
\*\* Since we are looking for small p-values I will use the comparisons where differential expression is looked for. The comparison where "should be equal" will not be considered and p-value ignored.

Genes which expression is altered by KO disregarding treatment were not considered in this part, because result would be then biased through genotype differences.

Genes were considered for this part if in all comparisons at least all samples from a single group showed experession (\<20 counts).
:::

::: callout-note
Not all comparisons have the same importance, therefore Stouffer method was used. With this method it is common to assign weights to p-values. In this part I used a ratio 1:1:2 for weights having bigger weights the comparison Veh vs ROCKi in WT, for KO mimicking, and in KO, for KO rescue. The result of this method gives a new p-value for each gene which was then corrected with IHW, using as covariates the mean of TPM.
:::

```{r}
all_Res_nofilt<-res_LRT_iwh[,c("row","log2FoldChange","baseMean","pvalue","padj")] %>%
                left_join(suffix = c("","_kovswt-Veh"),
                          kovswt_Veh_res_lfc[,c("row","log2FoldChange","pvalue","padj","keep")], by="row") %>%
                left_join(suffix = c("","_rvsv-WT"),
                          rvsv_WT_res_lfc[,c("row","log2FoldChange","pvalue","padj","keep")], by="row") %>%
                left_join(suffix = c("","_rvsv-KO"),
                          rvsv_KO_res_lfc[,c("row","log2FoldChange","pvalue","padj","keep")], by="row") %>% 
                left_join(suffix = c("","_rvsv-KOWT"),
                          rvsv_KOWT_res_lfc[,c("row","log2FoldChange","pvalue","padj","keep")], by="row") %>% 
                left_join(suffix = c("","_rvsv-WTKO"),
                          rvsv_WTKO_res_lfc[,c("row","log2FoldChange","pvalue","padj","keep")], by="row") %>%
                left_join(suffix = c("","_wtvsko-ROCKi"),
                          wtvsko_ROCKi_res_lfc[,c("row","log2FoldChange","pvalue","padj","keep")], by="row") %>%
                mutate(meanTPM=rowM_gtpm[row])

all_Res<-all_Res_nofilt %>% filter(!(row %in% DEG4gen))

# flag<-paste0(as.numeric(all_Res$`pvalue_kovswt-Veh`<0.05),as.numeric(all_Res$`pvalue_rvsv-WT`<0.05),as.numeric(all_Res$`pvalue_rvsv-KO`<0.05))  %>% strtoi(base=2)
# 
# all_Res$flag<-flag

```

```{r}
fisherMethod<-function(p){
                    Xsq <- -2 * sum(log(p))
                    pval <- 1 - pchisq(Xsq, df = 2 * length(p))
                    return(pval)
          }
stoufferMethod<-function(p,w){
                    Zi <- qnorm(1 - p)
                    Z <- sum(w * Zi)/sqrt(sum(w^2))
                    pval <- 1 - pnorm(Z)
                    return(pval)
}

mimic_columns<-c("keep","keep_rvsv-WT","keep_rvsv-KOWT")
rescue_columns<-c("keep","keep_rvsv-KO","keep_rvsv-WTKO")
overreaction_columns<-c("keep_wtvsko-ROCKi","keep_rvsv-KO","keep_rvsv-KOWT")
uniqueExpr_columns<-c("keep_rvsv-WT","keep_wtvsko-ROCKi","keep_rvsv-WTKO")

mimic_rows<-apply(all_Res[,mimic_columns],1,all)
rescue_rows<-apply(all_Res[,rescue_columns],1,all)
overreaction_rows<-apply(all_Res[,overreaction_columns],1,all)
uniqueExpr_rows<-apply(all_Res[,uniqueExpr_columns],1,all)

mimic_columns<-c("pvalue_kovswt-Veh","pvalue_rvsv-WT","pvalue_rvsv-KOWT")
rescue_columns<-c("pvalue_kovswt-Veh","pvalue_rvsv-KO","pvalue_rvsv-WTKO")
overreaction_columns<-c("pvalue_wtvsko-ROCKi","pvalue_rvsv-KO","pvalue_rvsv-KOWT")
uniqueExpr_columns<-c("pvalue_rvsv-WT","pvalue_wtvsko-ROCKi","pvalue_rvsv-WTKO")


mimic_columns_l2FC<-c("log2FoldChange_kovswt-Veh","log2FoldChange_rvsv-WT","log2FoldChange_rvsv-KOWT")
rescue_columns_l2FC<-c("log2FoldChange_kovswt-Veh","log2FoldChange_rvsv-KO","log2FoldChange_rvsv-WTKO")
overreaction_columns_l2FC<-c("log2FoldChange_wtvsko-ROCKi","log2FoldChange_rvsv-KO","log2FoldChange_rvsv-KOWT")
uniqueExpr_columns_l2FC<-c("log2FoldChange_rvsv-WT","log2FoldChange_wtvsko-ROCKi","log2FoldChange_rvsv-WTKO")

# all_Res$mimic_pval_FISHER<-apply(all_Res[,mimic_columns],1,fisherMethod)
# all_Res$rescue_pval_FISHER<-apply(all_Res[,rescue_columns],1,fisherMethod)

all_Res$mimic_pval_STOUFFER<-apply(all_Res[,mimic_columns],1,stoufferMethod,w=c(1,2,1))
all_Res$rescue_pval_STOUFFER<-apply(all_Res[,rescue_columns],1,stoufferMethod,w=c(1,2,1))
all_Res$overreaction_pval_STOUFFER<-apply(all_Res[,overreaction_columns],1,stoufferMethod,w=c(2,1,1))
all_Res$uniqueExpr_pval_STOUFFER<-apply(all_Res[,uniqueExpr_columns],1,stoufferMethod,w=c(2,1,1))

# all_Res$mimic_pval_FISHER_ihw<-NA
# all_Res$rescue_pval_FISHER_ihw<-NA
all_Res$mimic_pval_STOUFFER_ihw<-NA
all_Res$rescue_pval_STOUFFER_ihw<-NA
all_Res$overreaction_pval_STOUFFER_ihw<-NA
all_Res$uniqueExpr_pval_STOUFFER_ihw<-NA


# all_Res$mimic_pval_FISHER_ihw[mimic_rows]<-ihw(all_Res$mimic_pval_FISHER[mimic_rows],
#                                             all_Res$meanTPM[mimic_rows],
#                                             alpha=0.1,adjustment_type= 'BH') %>% adj_pvalues()
# all_Res$rescue_pval_FISHER_ihw[rescue_rows]<-ihw(all_Res$rescue_pval_FISHER[rescue_rows],
#                                             all_Res$meanTPM[rescue_rows],
#                                             alpha=0.1,adjustment_type= 'BH') %>% adj_pvalues()

all_Res$mimic_pval_STOUFFER_ihw[mimic_rows]<-ihw(all_Res$mimic_pval_STOUFFER[mimic_rows],
                                              all_Res$meanTPM[mimic_rows],
                                              alpha=0.1,adjustment_type= 'BH') %>% adj_pvalues()
all_Res$rescue_pval_STOUFFER_ihw[rescue_rows]<-ihw(all_Res$rescue_pval_STOUFFER[rescue_rows],
                                              all_Res$meanTPM[rescue_rows],
                                              alpha=0.1,adjustment_type= 'BH') %>% adj_pvalues()
all_Res$overreaction_pval_STOUFFER_ihw[overreaction_rows]<-ihw(all_Res$overreaction_pval_STOUFFER[overreaction_rows],
                                              all_Res$meanTPM[overreaction_rows],
                                              alpha=0.1,adjustment_type= 'BH') %>% adj_pvalues()
all_Res$uniqueExpr_pval_STOUFFER_ihw[uniqueExpr_rows]<-ihw(all_Res$uniqueExpr_pval_STOUFFER[uniqueExpr_rows],
                                              all_Res$meanTPM[uniqueExpr_rows],
                                              alpha=0.1,adjustment_type= 'BH') %>% adj_pvalues()

















```

### KO mimicking

Comparisons Names Codes:

kovswt-Veh --\> KO Veh vs WT Veh

rvsv-WT --\> WT ROCKi vs WT Veh

rvsv-KOWT --\> KO ROCKi vs WT Veh

```{r}
mimicres<-all_Res[mimic_rows,] %>% arrange(mimic_pval_STOUFFER_ihw) %>% filter(mimic_pval_STOUFFER_ihw<0.1) %>% left_join(geneName, by=c("row"="ENSEMBL")) %>% select(row,SYMBOL,meanTPM,mimic_pval_STOUFFER,mimic_pval_STOUFFER_ihw, matches(c(mimic_columns,mimic_columns_l2FC)))


mimicgenes<-mimicres %>% .$row 

datatable(mimicres,extensions = "Buttons",
          options = list(paging = TRUE,
                           scrollX=TRUE, 
                           searching = TRUE,
                           ordering = TRUE,
                           dom = 'Bfrtip',
                           buttons = c( 'csv', 'excel'),
                           pageLength=5, 
                           lengthMenu=c(3,5,10) ))

```

```{r}
vst4plts %>% filter(ENSEMBL==mimicgenes) %>%
  ggplot(aes(x=Group, y=TPM))+
  geom_boxplot(aes(fill=Group),outlier.shape = NA)+
  geom_jitter(width = 0.2,height = 0) + facet_grid(~SYMBOL) +
  labs(y="VST")+
  scale_fill_manual(values = colorList$Group_neu,guide="none")+
  theme_cowplot(12)+
  theme(axis.text.x = element_text(angle = 30,hjust = 1),
        axis.title.x  = element_blank())
```

Only one gene showed this pattern of expression.

::: callout-caution
Patryk's example Nr4a2 showed this pattern, unfortunately I did not found it with this approach. Nevertheless, when I looked at the expression of that same gene I found that I did not get the same gene counts. I don't know why is that so different since the others rest look quite similar. (I did not considered expressed Abcc6 and Lrmp -\>Irag2)
:::

```{r, fig.width=6,fig.height=4}
vst4plts %>% filter(SYMBOL%in%c("Irag2","Nr4a2","Abcc6","Lama4")) %>%
  ggplot(aes(x=Group, y=normCounts+0.1)) +
  geom_boxplot(aes(fill=Group),outlier.shape = NA)+
  geom_jitter(width = 0.2,height = 0) +
  facet_wrap(~SYMBOL, scales = "free") +
  labs(y="Normalized Counts")+
  scale_y_continuous(trans='log10')+
  scale_fill_manual(values = colorList$Group_neu,guide="none")+
  theme_cowplot(12)+
  theme(axis.text.x = element_text(angle = 30,hjust = 1),
        axis.title.x  = element_blank())

```

### KO rescue

Comparisons Names Codes:

kovswt-Veh --\> KO Veh vs WT Veh

rvsv-KO --\> KO ROCKi vs KO Veh

rvsv-WTKO --\> WT ROCKi vs KO Veh

::: callout-important
kovswt-Veh log2FoldChanges should be interpreted here as the opposite since we are focusing on the changes realted to KO Veh.
:::

```{r}

rescueres<-all_Res[rescue_rows,] %>% arrange(rescue_pval_STOUFFER_ihw) %>% filter(rescue_pval_STOUFFER_ihw<0.1) %>% left_join(geneName, by=c("row"="ENSEMBL")) %>% select(row,SYMBOL,meanTPM,rescue_pval_STOUFFER,rescue_pval_STOUFFER_ihw, matches(c(rescue_columns,rescue_columns_l2FC))) %>% arrange(rescue_pval_STOUFFER_ihw)




rescuegenes<-rescueres %>% .$row 

datatable(rescueres,extensions = "Buttons",
          options = list(paging = TRUE,
                           scrollX=TRUE, 
                           searching = TRUE,
                           ordering = TRUE,
                           dom = 'Bfrtip',
                           buttons = c( 'csv', 'excel'),
                           pageLength=5, 
                           lengthMenu=c(3,5,10) ))



rescuegenes_down<-all_Res[,c("row", rescue_columns_l2FC)]  %>% filter(row %in% rescuegenes & `log2FoldChange_kovswt-Veh` <0)  %>% .$row
rescuegenes_up<-all_Res[,c("row", rescue_columns_l2FC)]  %>% filter(row %in% rescuegenes & `log2FoldChange_kovswt-Veh` >0)  %>% .$row

```

```{r}
vst4plts %>% filter(ENSEMBL %in% rescuegenes,) %>% group_by(ENSEMBL,Group) %>% reframe(mExpr=mean(TPM)) %>% pivot_wider(id_cols = ENSEMBL,values_from = mExpr,names_from = Group) %>% column_to_rownames("ENSEMBL") %>% pheatmap::pheatmap(scale = "row",cluster_cols = FALSE, show_rownames = FALSE,border_color = NA )

vst4plts %>% filter(ENSEMBL %in% rescuegenes,) %>% group_by(ENSEMBL,Group) %>% reframe(mExpr=mean(TPM)) %>% pivot_wider(id_cols = ENSEMBL,values_from = mExpr,names_from = Group) %>% column_to_rownames("ENSEMBL") %>%
pheatmap::pheatmap(scale = "row",cluster_cols = FALSE, show_rownames = FALSE,border_color = NA,filename = "Heatmap_genesRescue.pdf")
```

#### GO enrichment (BP) {#sec-BP}

Here it is important to mention that the universe is reduced since not all expressed genes were tested. White boxes represent enriched go terms, size and alpha is scaled based on significance. Additionally, GO terms are grouped in black boxes, based on "wang" distances. Most significant term from cluster is shown as parent "term".

```{r}
synonyms<-geneName %>% filter(ENSEMBL %in% rescuegenes)
universers<-geneName %>% filter(ENSEMBL %in% all_Res$row[rescue_rows])

resGO<-enrichGO(unique(synonyms$ENSEMBL),keyType = "ENSEMBL", ont="BP",OrgDb = org.Mm.eg.db, universe =all_Res$row,readable = T,minGSSize = 10, maxGSSize = 200)

resGO_DEG4gen_sig<-resGO@result %>% filter(p.adjust<0.01)
simMatrix <- rrvgo::calculateSimMatrix(resGO_DEG4gen_sig$ID,semdata = mmuGO,orgdb = "org.Mm.eg.db",
                                method="Wang")

scores <- setNames(-log10(resGO_DEG4gen_sig$p.adjust), resGO_DEG4gen_sig$ID)
reducedTerms <- rrvgo::reduceSimMatrix(simMatrix,
                                scores,
                                threshold=0.7,
                                orgdb="org.Mm.eg.db")

edges_Temp<-reducedTerms %>%  mutate("from"=parent, "to"=paste0(parent,".",go),parentTerm=factor(parentTerm))

vert_Temp<-data.frame(name=edges_Temp$to, scores=edges_Temp$score,"Description"=edges_Temp$term,"pterm"=edges_Temp$parentTerm)
vert_Temp2<-edges_Temp %>%filter(go==parent) %>% dplyr::select(parent,score,term,parentTerm)
colnames(vert_Temp2)<-c("name","scores","Description","pterm")

edges_Temp2<-data.frame("from"="Origine", "to"=vert_Temp2$name)
vert_Temp<-rbind(vert_Temp,vert_Temp2,c("name"="Origine","scores"=Inf,"Description"=NA,"pterm"=NA))
edges_Temp<-rbind(edges_Temp[,c("from","to")],edges_Temp2)
vert_Temp$scores<-as.numeric(vert_Temp$scores)
tree <- data.tree::FromDataFrameNetwork(edges_Temp)
mylevels <- data.frame( name=tree$Get('name'), level=tree$Get("level") )
vert_Temp <- vert_Temp %>% left_join(mylevels, by="name") %>% mutate(new_label=ifelse(level==2, Description, NA))

edges_Temp<-edges_Temp %>% dplyr::filter(from!="Origine")
vert_Temp<-vert_Temp %>% dplyr::filter(name != "Origine")

vert_Temp<-vert_Temp %>% mutate(scores4alpha=ifelse(level==2,0,
                                                    ifelse(scores>5,5,
                                                           ifelse(scores>4,4,
                                                                  ifelse(scores>3,3,
                                                                         ifelse(scores>2,2,1))))),
                                scores4alpha=factor(scores4alpha))

mygraph <- igraph::graph_from_data_frame( edges_Temp[,c("from","to")], vertices=vert_Temp)



```

```{r,fig.height=10,fig.width=10}
BP_bxplt<-ggraph(mygraph, 'treemap', weight = scores) +
  geom_node_tile(aes(fill = pterm, alpha =scores4alpha), color="white", linewidth=1) +
  geom_node_tile(aes(color = as.factor(as.numeric(!is.na(new_label))),
                     linewidth=as.factor(as.numeric(!is.na(new_label)))),fill=NA) +
  geom_node_label( aes(label=new_label), size=3,repel = T)+
  guides(size="none",alpha="none")+
  scale_alpha_manual(values = c("0"=0,"1"=0.2,"2"=0.4,"3"=0.6,"4"=0.8,"5"=1),guide="none")+
  scale_fill_manual(values=pals::cubicl(length(levels(vert_Temp$pterm))), guide="none")+
  scale_color_manual(values=c("0"="white","1"="black"), guide="none")+
  scale_linewidth_manual(values=c("0"=0,"1"=1), guide="none")+
  theme_void() +
  theme(legend.position="none")
BP_bxplt
ggsave(BP_bxplt,filename="BP_boxes.pdf",device = "pdf",width = 8,height = 8)
```

```{r}
resGO_DEG4gen_sig %>% as_tibble() %>% left_join(reducedTerms, by=c("ID"="go")) %>% dplyr::select(ID,Description,GeneRatio,pvalue,p.adjust,cluster,parentTerm,geneID) %>%
  datatable(extensions = "Buttons",
          options = list(paging = TRUE,
                           scrollX=TRUE, 
                           searching = TRUE,
                           ordering = TRUE,
                           dom = 'Bfrtip',
                           buttons = c( 'csv', 'excel'),
                           pageLength=5, 
                           lengthMenu=c(3,5,10) ))
```

```{r}

averplpt<-resGO_DEG4gen_sig %>% as_tibble() %>% left_join(reducedTerms, by=c("ID"="go")) %>% dplyr::select(ID,Description,GeneRatio,pvalue,p.adjust,cluster,parentTerm,geneID,Count) %>% arrange(desc(Count)) %>% group_by(parentTerm) %>% slice_head(n=1) %>% arrange(p.adjust) %>% head(n=10)

genes2plpt<-apply(averplpt,1,function(x){unlist(strsplit(x[8], split = "/",fixed = T)) %>% unname()})
names(genes2plpt)<-averplpt$parentTerm
genes2plpt<-stack(genes2plpt) %>% left_join(geneName,by = c("values"="SYMBOL")) %>% arrange(values) %>% mutate(genef=factor(values,levels=unique(values)))


```

#### GO enrichment (MF)

```{r}
synonyms<-geneName %>% filter(ENSEMBL %in% rescuegenes)
universers<-geneName %>% filter(ENSEMBL %in% all_Res$row[rescue_rows])

resGO<-enrichGO(unique(synonyms$ENSEMBL),keyType = "ENSEMBL", ont="MF",OrgDb = org.Mm.eg.db, universe =all_Res$row,readable = T,minGSSize = 10, maxGSSize = 200)

resGO_DEG4gen_sig<-resGO@result %>% filter(p.adjust<0.01)
simMatrix <- rrvgo::calculateSimMatrix(resGO_DEG4gen_sig$ID,semdata = mmuGO_MF,orgdb = "org.Mm.eg.db",
                                method="Wang", ont="MF")

scores <- setNames(-log10(resGO_DEG4gen_sig$p.adjust), resGO_DEG4gen_sig$ID)
reducedTerms <- rrvgo::reduceSimMatrix(simMatrix,
                                scores,
                                threshold=0.7,
                                orgdb="org.Mm.eg.db")

edges_Temp<-reducedTerms %>%  mutate("from"=parent, "to"=paste0(parent,".",go),parentTerm=factor(parentTerm))

vert_Temp<-data.frame(name=edges_Temp$to, scores=edges_Temp$score,"Description"=edges_Temp$term,"pterm"=edges_Temp$parentTerm)
vert_Temp2<-edges_Temp %>%filter(go==parent) %>% dplyr::select(parent,score,term,parentTerm)
colnames(vert_Temp2)<-c("name","scores","Description","pterm")

edges_Temp2<-data.frame("from"="Origine", "to"=vert_Temp2$name)
vert_Temp<-rbind(vert_Temp,vert_Temp2,c("name"="Origine","scores"=Inf,"Description"=NA,"pterm"=NA))
edges_Temp<-rbind(edges_Temp[,c("from","to")],edges_Temp2)
vert_Temp$scores<-as.numeric(vert_Temp$scores)
tree <- data.tree::FromDataFrameNetwork(edges_Temp)
mylevels <- data.frame( name=tree$Get('name'), level=tree$Get("level") )
vert_Temp <- vert_Temp %>% left_join(mylevels, by="name") %>% mutate(new_label=ifelse(level==2, Description, NA))

edges_Temp<-edges_Temp %>% dplyr::filter(from!="Origine")
vert_Temp<-vert_Temp %>% dplyr::filter(name != "Origine")

vert_Temp<-vert_Temp %>% mutate(scores4alpha=ifelse(level==2,0,
                                                    ifelse(scores>5,5,
                                                           ifelse(scores>4,4,
                                                                  ifelse(scores>3,3,
                                                                         ifelse(scores>2,2,1))))),
                                scores4alpha=factor(scores4alpha))

mygraph <- igraph::graph_from_data_frame( edges_Temp[,c("from","to")], vertices=vert_Temp)



```

```{r,fig.height=4,fig.width=4}
MF_bxplt<-ggraph(mygraph, 'treemap', weight = scores) +
  geom_node_tile(aes(fill = pterm, alpha =scores4alpha), color="white", linewidth=1) +
  geom_node_tile(aes(color = as.factor(as.numeric(!is.na(new_label))),
                     linewidth=as.factor(as.numeric(!is.na(new_label)))),fill=NA) +
  geom_node_label( aes(label=new_label), size=3,repel = T)+
  guides(size="none",alpha="none")+
  scale_alpha_manual(values = c("0"=0,"1"=0.2,"2"=0.4,"3"=0.6,"4"=0.8,"5"=1),guide="none")+
  scale_fill_manual(values=pals::cubicl(length(levels(vert_Temp$pterm))), guide="none")+
  scale_color_manual(values=c("0"="white","1"="black"), guide="none")+
  scale_linewidth_manual(values=c("0"=0,"1"=1), guide="none")+
  theme_void() +
  theme(legend.position="none")
MF_bxplt
ggsave(MF_bxplt,filename="MF_boxes.pdf",device = "pdf",width = 4,height = 4)
```

```{r}
resGO_DEG4gen_sig %>% as_tibble() %>% left_join(reducedTerms, by=c("ID"="go")) %>% dplyr::select(ID,Description,GeneRatio,pvalue,p.adjust,cluster,parentTerm,geneID) %>%
  datatable(extensions = "Buttons",
          options = list(paging = TRUE,
                           scrollX=TRUE, 
                           searching = TRUE,
                           ordering = TRUE,
                           dom = 'Bfrtip',
                           buttons = c( 'csv', 'excel'),
                           pageLength=5, 
                           lengthMenu=c(3,5,10) ))
```

```{r}

averplpt_MF<-resGO_DEG4gen_sig %>% as_tibble() %>% left_join(reducedTerms, by=c("ID"="go")) %>% dplyr::select(ID,Description,GeneRatio,pvalue,p.adjust,cluster,parentTerm,geneID,Count) %>% arrange(cluster, desc(Count)) %>% mutate(parentTermFact=factor(parentTerm,levels=unique(parentTerm)))

genes2plp2t_MF<-apply(averplpt_MF,1,function(x){unlist(strsplit(x[8], split = "/",fixed = T)) %>% unname()})
names(genes2plp2t_MF)<-averplpt_MF$Description
genes2plp2t_MF<-stack(genes2plp2t_MF) %>% left_join(geneName,by = c("values"="SYMBOL")) %>% arrange(values) %>% mutate(genef=factor(values,levels=unique(values)))


```

#### KEGG enrichment

```{r, fig.width=6,fig.height=8}
resKEGG<-enrichKEGG(unique(synonyms$ENTREZID),keyType = "ncbi-geneid", organism = "mmu", minGSSize = 10, maxGSSize = 200)

resKEGG@result$Description<-gsub(pattern = " - Mus musculus (house mouse)",
                                 replacement = "",resKEGG@result$Description,
                                 fixed = T)

barplot(resKEGG, showCategory=Inf) 
```

```{r}
resKEGG@result %>%filter(p.adjust <0.1) %>% as_tibble() %>% dplyr::select(ID,Description,GeneRatio,pvalue,p.adjust) %>% mutate(Description= gsub(pattern = " - Mus musculus (house mouse)",
                                 replacement = "",Description,
                                 fixed = T)) %>%
  datatable(extensions = "Buttons",
          options = list(paging = TRUE,
                           scrollX=TRUE, 
                           searching = TRUE,
                           ordering = TRUE,
                           dom = 'Bfrtip',
                           buttons = c( 'csv', 'excel'),
                           pageLength=5, 
                           lengthMenu=c(3,5,10) ))
```

### LTR

THe likelihood ratio test from DESeq2 is an alternative to pair-wise comparisons to analyze all levels of all factors at once. When implemented, with IWH for p-value correction, we could identify 62 differentially expressed genes. Which expression looks like this:

```{r}
genesLRT<-res_LRT_iwh %>% filter(padj<0.1) %>% .$row

vst4plts %>% filter(ENSEMBL %in% genesLRT,) %>% group_by(ENSEMBL,Group) %>% reframe(mExpr=mean(TPM)) %>% pivot_wider(id_cols = ENSEMBL,values_from = mExpr,names_from = Group) %>% column_to_rownames("ENSEMBL") %>% pheatmap::pheatmap(scale = "row",cluster_cols = FALSE, show_rownames = FALSE,border_color = NA)
```

55 of these belong to genes previously characterized as KO changes which pattern is recognizable in the heatmap. The rest look like this:

```{r, fig.height=6,fig.width=8}
genesLRT_interestinng<-genesLRT[!genesLRT %in% DEG4gen]

vst4plts %>% filter(ENSEMBL%in%genesLRT_interestinng) %>%
  ggplot(aes(x=Group, y=TPM)) +
  geom_boxplot(aes(fill=Group),outlier.shape = NA)+
  geom_jitter(width = 0.2,height = 0) +
  facet_wrap(~SYMBOL, scales = "free") +
  labs(y="VST")+
  #scale_y_continuous(trans='log10')+
  scale_fill_manual(values = colorList$Group_neu,guide="none")+
  theme_cowplot(12)+
  theme(axis.text.x = element_text(angle = 30,hjust = 1),
        axis.title.x  = element_blank())
```

Two of them have a pattern of KO rescue (Gm19680 and Ntng2). Fam205a2, shown previously a pattern of disregulation caused by the treatment. The others show a pattern of KO overreaction to ROCKi

#### KO overreaction

Similar as with KO mimicking and KO rescue for identifying genes with KO pattern overreaction to ROCKi I used the three comparisons where KO treated is involved. (The comparison WT ROCKi vs KO ROCKi has the double weight as the others comparisons). Following this analysis I identify 225 genes with the pattern of overreaction

```{r echo=FALSE,message=FALSE, warning=FALSE}


overreact<-all_Res[overreaction_rows,] %>% arrange(overreaction_pval_STOUFFER_ihw) %>%
            filter(overreaction_pval_STOUFFER_ihw<0.1) %>% left_join(geneName, by=c("row"="ENSEMBL")) %>%
            select(row,SYMBOL,meanTPM,overreaction_pval_STOUFFER,overreaction_pval_STOUFFER_ihw, matches(c(overreaction_columns,overreaction_columns_l2FC))) %>%
            arrange(overreaction_pval_STOUFFER_ihw)


overreactgenes<-overreact %>% .$row 
```

```{r}
vst4plts %>% filter(ENSEMBL %in% overreactgenes,) %>% group_by(ENSEMBL,Group) %>% reframe(mExpr=mean(TPM)) %>% pivot_wider(id_cols = ENSEMBL,values_from = mExpr,names_from = Group) %>% column_to_rownames("ENSEMBL") %>% pheatmap::pheatmap(scale = "row",cluster_cols = FALSE, show_rownames = FALSE,border_color = NA)
```

```{r}
datatable(overreact,extensions = "Buttons",
          options = list(paging = TRUE,
                           scrollX=TRUE, 
                           searching = TRUE,
                           ordering = TRUE,
                           dom = 'Bfrtip',
                           buttons = c( 'csv', 'excel'),
                           pageLength=5, 
                           lengthMenu=c(3,5,10) ))
```

Interestingly only 19 genes are shred with the pattern of KO rescue and overreaction:

```{r, fig.width=10, fig.height=8}

vst4plts %>% filter(ENSEMBL%in% intersect(overreactgenes,rescuegenes)) %>%
    ggplot(aes(x=Group, y=normCounts)) +
    geom_boxplot(aes(fill=Group),outlier.shape = NA)+
    geom_jitter(width = 0.2,height = 0) +
    facet_wrap(~SYMBOL, scales = "free_y") +
    labs(y="Normalized Counts (log-scale)")+
    scale_y_continuous(trans='log10')+
    scale_fill_manual(values = colorList$Group_neu,guide="none")+
    theme_cowplot(12)+
    theme(axis.text.x = element_text(angle = 30,hjust = 1),
          axis.title.x  = element_blank())

```

And this is the entichment of GO. 

```{r}
synonyms<-geneName %>% filter(ENSEMBL %in% setdiff(overreactgenes,rescuegenes))
universers<-geneName %>% filter(ENSEMBL %in% all_Res$row[overreaction_rows])

resGO<-enrichGO(unique(synonyms$ENSEMBL),keyType = "ENSEMBL", ont="BP",OrgDb = org.Mm.eg.db, universe =all_Res$row,readable = T,minGSSize = 10, maxGSSize = 200)

resGO_DEG4gen_sig<-resGO@result %>% filter(p.adjust<0.01)
simMatrix <- rrvgo::calculateSimMatrix(resGO_DEG4gen_sig$ID,semdata = mmuGO,orgdb = "org.Mm.eg.db",
                                method="Wang")

scores <- setNames(-log10(resGO_DEG4gen_sig$p.adjust), resGO_DEG4gen_sig$ID)
reducedTerms <- rrvgo::reduceSimMatrix(simMatrix,
                                scores,
                                threshold=0.7,
                                orgdb="org.Mm.eg.db")

edges_Temp<-reducedTerms %>%  mutate("from"=parent, "to"=paste0(parent,".",go),parentTerm=factor(parentTerm))

vert_Temp<-data.frame(name=edges_Temp$to, scores=edges_Temp$score,"Description"=edges_Temp$term,"pterm"=edges_Temp$parentTerm)
vert_Temp2<-edges_Temp %>%filter(go==parent) %>% dplyr::select(parent,score,term,parentTerm)
colnames(vert_Temp2)<-c("name","scores","Description","pterm")

edges_Temp2<-data.frame("from"="Origine", "to"=vert_Temp2$name)
vert_Temp<-rbind(vert_Temp,vert_Temp2,c("name"="Origine","scores"=Inf,"Description"=NA,"pterm"=NA))
edges_Temp<-rbind(edges_Temp[,c("from","to")],edges_Temp2)
vert_Temp$scores<-as.numeric(vert_Temp$scores)
tree <- data.tree::FromDataFrameNetwork(edges_Temp)
mylevels <- data.frame( name=tree$Get('name'), level=tree$Get("level") )
vert_Temp <- vert_Temp %>% left_join(mylevels, by="name") %>% mutate(new_label=ifelse(level==2, Description, NA))

edges_Temp<-edges_Temp %>% dplyr::filter(from!="Origine")
vert_Temp<-vert_Temp %>% dplyr::filter(name != "Origine")

vert_Temp<-vert_Temp %>% mutate(scores4alpha=ifelse(level==2,0,
                                                    ifelse(scores>5,5,
                                                           ifelse(scores>4,4,
                                                                  ifelse(scores>3,3,
                                                                         ifelse(scores>2,2,1))))),
                                scores4alpha=factor(scores4alpha))

mygraph <- igraph::graph_from_data_frame( edges_Temp[,c("from","to")], vertices=vert_Temp)



```

```{r,fig.height=5,fig.width=5}
ggraph(mygraph, 'treemap', weight = scores) +
  geom_node_tile(aes(fill = pterm, alpha =scores4alpha), color="white", linewidth=1) +
  geom_node_tile(aes(color = as.factor(as.numeric(!is.na(new_label))),
                     linewidth=as.factor(as.numeric(!is.na(new_label)))),fill=NA) +
  geom_node_label( aes(label=new_label), size=3,repel = T)+
  guides(size="none",alpha="none")+
  scale_alpha_manual(values = c("0"=0,"1"=0.2,"2"=0.4,"3"=0.6,"4"=0.8,"5"=1),guide="none")+
  scale_fill_manual(values=pals::cubicl(length(levels(vert_Temp$pterm))), guide="none")+
  scale_color_manual(values=c("0"="white","1"="black"), guide="none")+
  scale_linewidth_manual(values=c("0"=0,"1"=1), guide="none")+
  theme_void() +
  theme(legend.position="none")
```

```{r}
resGO_DEG4gen_sig %>% as_tibble() %>% left_join(reducedTerms, by=c("ID"="go")) %>% dplyr::select(ID,Description,GeneRatio,pvalue,p.adjust,cluster,parentTerm,geneID) %>%
  datatable(extensions = "Buttons",
          options = list(paging = TRUE,
                           scrollX=TRUE, 
                           searching = TRUE,
                           ordering = TRUE,
                           dom = 'Bfrtip',
                           buttons = c( 'csv', 'excel'),
                           pageLength=5, 
                           lengthMenu=c(3,5,10) ))
```

#### KO Unique-Response

With this comparison I want to highlight genes that reacted to ROCKi in WT but not in KO.

```{r}
nonresponsive<-all_Res[uniqueExpr_rows,] %>% arrange(uniqueExpr_pval_STOUFFER_ihw) %>%
            filter(uniqueExpr_pval_STOUFFER_ihw<0.1) %>% left_join(geneName, by=c("row"="ENSEMBL")) %>%
            select(row,SYMBOL,meanTPM,uniqueExpr_pval_STOUFFER,uniqueExpr_pval_STOUFFER_ihw, matches(c(uniqueExpr_columns,uniqueExpr_columns_l2FC))) %>%
            arrange(uniqueExpr_pval_STOUFFER_ihw)


nonresponsivegenes<-nonresponsive %>% .$row 

```

```{r}

vst4plts %>% filter(ENSEMBL%in% nonresponsivegenes) %>%
    ggplot(aes(x=Group, y=TPM)) +
    geom_boxplot(aes(fill=Group),outlier.shape = NA)+
    geom_jitter(width = 0.2,height = 0) +
    facet_wrap(~SYMBOL, scales = "free_y") +
    labs(y="VST")+
    #scale_y_continuous(trans='log10')+
    scale_fill_manual(values = colorList$Group_neu,guide="none")+
    theme_cowplot(12)+
    theme(axis.text.x = element_text(angle = 30,hjust = 1),
          axis.title.x  = element_blank())

```

## Rescue

$$
Rescue Ratio = \frac{log2FC(ROCKi_{KO})}{-log2FC(KO_{Veh})}
$$

Where ROCKi_KO stands for the comparison of ROCKi vs Veh in KO genotype and KO_Veh is KO vs WT treated with Veh. A value around 1 (dashed line) represent complete rescue, values greater than 1 mean that not only WT Veh levels are restore but increased, values between 0 and 1 mean partial rescue, 0 means ROCKi did not altred KO expression, lastly negative values mean that with ROCKi the altered KO expression is increased with the same direction.

```{r, fig.height=4, fig.width=8}
all_Res_nofilt_temp<-res_LRT_iwh[,c("row","log2FoldChange","baseMean","pvalue","padj")] %>%
                left_join(suffix = c("","_kovswt-Veh"),
                          as_tibble(kovswt_Veh_res[,c("log2FoldChange","pvalue","padj")],rownames="row"), by="row") %>%
                left_join(suffix = c("","_rvsv-WT"),
                          as_tibble(rvsv_WT_res[,c("log2FoldChange","pvalue","padj")],rownames="row"), by="row") %>%
                left_join(suffix = c("","_rvsv-KO"),
                          as_tibble(rvsv_KO_res[,c("log2FoldChange","pvalue","padj")],rownames="row"), by="row") %>% 
                left_join(suffix = c("","_rvsv-KOWT"),
                          as_tibble(rvsv_KOWT_res[,c("log2FoldChange","pvalue","padj")],rownames="row"), by="row") %>% 
                left_join(suffix = c("","_rvsv-WTKO"),
                          as_tibble(rvsv_WTKO_res[,c("log2FoldChange","pvalue","padj")],rownames="row"), by="row") %>%
                left_join(suffix = c("","_wtvsko-ROCKi"),
                          as_tibble(wtvsko_ROCKi_res[,c("log2FoldChange","pvalue","padj")],rownames="row"), by="row") %>%
                mutate(meanTPM=rowM_gtpm[row])
dataperc_Resc<- all_Res_nofilt_temp[,c("row","log2FoldChange_kovswt-Veh",
                                       "log2FoldChange_rvsv-KO")] %>%
  mutate(changeKO=`log2FoldChange_kovswt-Veh`,
         changeROCKiKO=`log2FoldChange_rvsv-KO`,
         percrecue=changeROCKiKO/-(changeKO), 
         class=ifelse(row %in% overreactgenes,"KO Overreaction",
                      ifelse(row %in% rescuegenes,"KO rescue",
                             ifelse(row %in% DEG4gen,"KO Changes","Others")))) 
ggplot(dataperc_Resc,aes(x=percrecue))+
  geom_vline(xintercept = 0,linewidth=0.1, color="gray50")+
  geom_vline(xintercept = 1,linetype="dashed",linewidth=0.5, color="gray50")+
  geom_density(aes(color=class))+
  xlim(c(-7.5,10))+labs(x="Rescue Ratio")+
  theme_cowplot()+
  scale_color_manual(values=c("KO Changes"="firebrick1", "KO Overreaction"="royalblue",
                              "KO rescue"="#00ba4b", "Others"="gray50"),
                     name="Expression Pattern")+
  theme(legend.position = "bottom", legend.title = element_blank())


```

I talked with Nico about this and he pointed me to his paper where he and Ivano developed a Rescue Index which has this formula:

$$
RescueIndex=10^{-\frac{(Rescue - WT)}{(KO - WT)}}
$$

Where normalized log2 counts were used. I decided to apply it to our data, but instead of power 10 I will use 2, for coherence with the powers. This is the formula:

$$
RescueIndex=2^{-\frac{(ROCKi_{KO} - Veh_{WT})}{(Veh_{KO} - Veh_{WT})}}
$$

It is important to recall that log2(x)-log2(y)=log2(x/y), therefore I will use the log2-foldchanges calculated by DESeq2.

```{r}
Rescue_Index<- all_Res_nofilt_temp[,c("row","log2FoldChange_kovswt-Veh",
                                       "log2FoldChange_rvsv-KOWT")] %>%
  mutate(changeKO=`log2FoldChange_kovswt-Veh`,
         changeRescue=`log2FoldChange_rvsv-KOWT`,
         RI=2^-(changeRescue/changeKO), 
         class=ifelse(row %in% overreactgenes,"KO Overreaction",
                      ifelse(row %in% rescuegenes,"KO rescue",
                             ifelse(row %in% DEG4gen,"KO Changes","Others")))) 

ggplot(Rescue_Index,aes(x=RI))+
  geom_vline(xintercept = 0.5,linewidth=0.1, color="gray50")+
  geom_vline(xintercept = 1,linetype="dashed",linewidth=0.5, color="gray50")+
  geom_density(aes(color=class))+
  xlim(c(0,5))+labs(x="Rescue Index")+
  theme_cowplot()+
  scale_color_manual(values=c("KO Changes"="firebrick1", "KO Overreaction"="royalblue",
                              "KO rescue"="#00ba4b", "Others"="gray50"),
                     name="Expression Pattern")+
  theme(legend.position = "bottom", legend.title = element_blank())
```

Here a value of 0.5 represent that there is no rescue and that the values from KO Veh and KO ROCKi change similarly in comparison to WT Veh. Values from 0-0.5 represent that the gene expression of KO ROCKi changed more than KO Veh (in the same direction). 1 means perfect rescue, KO ROCKi is similar to WT Veh, and values above 1 means over-rescue.

This is the relationship between the two values:

```{r}
left_join(Rescue_Index,dataperc_Resc) %>%
  ggplot(aes(x=percrecue, y=RI))+
  geom_point(size=0.5)+
  ylim(c(0,3))+xlim(c(-3,3))+
  theme_bw()+labs(x="Rescue Index", y="Rescue Ratio")

```

As it is clearly seen there is a relationship, where the data is only differentially transformed (maths not included, but analyzed). Here are the different groups plotted, and they were distributed as expected.

```{r}

left_join(Rescue_Index,dataperc_Resc) %>%
  dplyr::filter(class != "Others") %>%
  ggplot(aes(x=percrecue, y=RI))+
  geom_point(size=0.5, aes(color=class))+
  ylim(c(0,3))+xlim(c(-3,3))+
  theme_bw()+labs(x="Rescue Index", y="Rescue Ratio")+
  facet_wrap(~class,ncol = 3)+
  scale_color_manual(values=c("KO Changes"="firebrick1", "KO Overreaction"="royalblue",
                              "KO rescue"="#00ba4b", "Others"="gray50"),
                     name="Expression Pattern")+
  theme(legend.position = "none")

```

While writing this part just realized that I was not considering the actual effect of ROCKi in the formula so I came with a new one:

$$
 Real\ Rescue\ Ratio  = \frac{log2FC(ROCKi_{KO})-log2FC(ROCKi_{WT})}{-log2FC(KO_{Veh})}
$$

The new term represent the difference between ROCKi and Veh in WT, the interpretation of this ratio is the same as the one I described above.

```{r}
dataperc_Resc2<- all_Res_nofilt_temp[,c("row","log2FoldChange_kovswt-Veh","log2FoldChange_rvsv-WT",
                                       "log2FoldChange_rvsv-KO",
                                       "pvalue_kovswt-Veh","pvalue_rvsv-WT",
                                       "pvalue_rvsv-KO")] %>%
  mutate(changeKO=`log2FoldChange_kovswt-Veh`,
         changeROCKi=`log2FoldChange_rvsv-WT`,
         changeROCKiKO=`log2FoldChange_rvsv-KO`,
         realreascue2=((changeROCKiKO-changeROCKi)/-(changeKO)) , 
         class=ifelse(row %in% overreactgenes,"KO Overreaction",
                      ifelse(row %in% rescuegenes,"KO rescue",
                             ifelse(row %in% DEG4gen,"KO Changes","Others")))) 

rescueDenPlot<-ggplot(dataperc_Resc2,aes(x=realreascue2))+
  geom_vline(xintercept = 0,linewidth=0.1, color="gray50")+
  geom_vline(xintercept = 1,linetype="dashed",linewidth=0.5, color="gray50")+
  geom_density(aes(color=class))+
  xlim(c(-7.5,10))+labs(x="Real Rescue Ratio")+
  theme_cowplot()+
  scale_color_manual(values=c("KO Changes"="firebrick1", "KO Overreaction"="royalblue",
                              "KO rescue"="#00ba4b", "Others"="gray50"),
                     name="Expression Pattern")+
  theme(legend.position = "bottom", legend.title = element_blank())

rescueDenPlot
ggsave(rescueDenPlot,filename="rescueDenPlot.pdf",device = "pdf")

```

And the relation with Nico's Rescue Index looks like this:

```{r}
left_join(Rescue_Index,dataperc_Resc2) %>%
  #dplyr::filter(class != "Others") %>%
  ggplot(aes(x=realreascue2, y=RI))+
  geom_point(size=0.5, aes(color=class))+
  ylim(c(0,4))+xlim(c(-4,4))+
  theme_bw()+labs(y="Rescue Index", x="Real Rescue Ratio")+
  facet_wrap(~class,ncol = 4)+
  scale_color_manual(values=c("KO Changes"="firebrick1", "KO Overreaction"="royalblue",
                              "KO rescue"="#00ba4b", "Others"="gray50"),
                     name="Expression Pattern")+
  theme(legend.position = "none")
```

Patterns are maintained because as already discussed there are not that many and neither big expression changes between ROCKi and Veh in WT.

It is worth to mention that based on the density plot it is expected that most of the other genes show values of real rescue ratio similar as rescue genes:

```{r}

d<-density(dataperc_Resc2$realreascue2,n=2^20)

tibble(x=d$x, y=d$y, g="g") %>% filter(x> -10 & x< 10)%>%
ggplot( aes(x=x, y=y))+
  geom_line()+
  geom_segment(aes(xend=x, yend=0,color=x))+
  geom_vline(xintercept = 0,linewidth=0.1, color="gray30")+
  geom_vline(xintercept = 1,linetype="dashed",linewidth=0.5, color="gray30")+
  #geom_density_ridges_gradient()+
 # xlim(c(-10,10))+
  labs(x="Real Rescue Ratio", x="Density")+
  theme_cowplot()+
  scale_color_gradientn(colours = c(rep("#00ffff",30),
                                   "#008080","#008080",
                                   "#006D2C","#006D2C",
                                   "#31A354","#74C476",
                                   "#A1D99B","#C7E9C0","#EDF8E9",
                                   "white",
                                   "#FEF0D9","#FDCC8A",
                                   "#FC8D59","#E34A33","#B30000",
                                   "#99004d","#99004d",
                                   "#800080","#800080",
                                   rep("#ff00ff",30)),
                       #breaks=seq(from=-2.5,to=2.5,by=0.5), #c(-2.5,-2,-1.5,-1,-0.8,-0.6,-0.4,-0.2,0,0.2,0.4,0.6,0.8,1,1.5,2,2.5),
                       #labels=seq(from=-2.5,to=2.5,by=0.5),
                       limits=c(-10,10),
                                   name="Real Rescue Ratio", na.value = "transparent")+
  theme(legend.position ="none") 

```

Nevertheless, rescue pattern and no changes in gene expression would lead to similar Real Rescue Ratio. Here is an example, where both genes have a **real rescue rate** \~ 1.

```{r}
vst4plts %>% filter(ENSEMBL%in%c("ENSMUSG00000031652","ENSMUSG00000037206")) %>%
  ggplot(aes(x=Group, y=TPM)) +
  geom_boxplot(aes(fill=Group),outlier.shape = NA)+
  geom_jitter(width = 0.2,height = 0) +
  facet_wrap(~SYMBOL, scales = "free") +
  labs(y="VST")+
  #scale_y_continuous(trans='log10')+
  scale_fill_manual(values = colorList$Group_neu,guide="none")+
  theme_cowplot(12)+
  theme(axis.text.x = element_text(angle = 30,hjust = 1),
        axis.title.x  = element_blank())

```

Then, in order to make sense out of the Real Rescue Ratio I filtered for genes which expression needs to be rescued (in either direction) based on the log2 foldchange between KO and WT in Veh (abs(log2FC)\>0.25).

```{r}
dataperc_Resc2 %>% #filter(`pvalue_kovswt-Veh`<0.1 |`pvalue_rvsv-WT`<0.1 | `pvalue_rvsv-KO`<0.1  ) %>%
  filter(abs(`log2FoldChange_kovswt-Veh`)>0.25)%>%
  ggplot(aes(x=realreascue2, y=class, fill=..x..))+
  geom_vline(xintercept = 0,linewidth=0.1, color="gray50")+
  geom_vline(xintercept = 1,linetype="dashed",linewidth=0.5, color="gray50")+
  geom_density_ridges_gradient()+
  xlim(c(-10,10))+labs(x="Real Rescue Ratio")+
  theme_cowplot()+
  scale_fill_gradientn(colours = c(rep("#00ffff",30),
                                   "#008080","#008080",
                                   "#006D2C","#006D2C",
                                   "#31A354","#74C476",
                                   "#A1D99B","#C7E9C0","#EDF8E9",
                                   "white",
                                   "#FEF0D9","#FDCC8A",
                                   "#FC8D59","#E34A33","#B30000",
                                   "#99004d","#99004d",
                                   "#800080","#800080",
                                   rep("#ff00ff",30)),
                       #breaks=seq(from=-2.5,to=2.5,by=0.5), #c(-2.5,-2,-1.5,-1,-0.8,-0.6,-0.4,-0.2,0,0.2,0.4,0.6,0.8,1,1.5,2,2.5),
                       #labels=seq(from=-2.5,to=2.5,by=0.5),
                       limits=c(-10,10),
                                   name="Real Rescue Ratio", na.value = "transparent")+
  theme(legend.position ="none", axis.title.y = element_blank()) 

dataperc_Resc2_filt<-dataperc_Resc2 %>%
  #filter(`pvalue_kovswt-Veh`<0.1 |`pvalue_rvsv-WT`<0.1 | `pvalue_rvsv-KO`<0.1  ) %>%
  filter(abs(`log2FoldChange_kovswt-Veh`)>0.25)
```

With the real rescue ratio we could then visualize the results from @sec-BP. These are the genes with significant rescue pattern from the top 10 significant group-terms from the biological processes(sorted by p-value ), the term with most genes with KO rescue pattern per group was selected as representative.

```{r,fig.width=15, fig.height=8}

a<-averplpt %>% ungroup()%>%
  mutate(Description=factor(Description,levels=rev(Description)))%>%
  ggplot(aes(x=Count, y=Description))+
  geom_point(aes(color=-log10(p.adjust), size=-log10(p.adjust)))+
  scale_color_viridis(direction = -1)+
  theme_cowplot()+
  theme(axis.title.y = element_blank(), legend.position = "bottom",legend.direction = "horizontal", legend.box = "vertical")
  

b<-genes2plpt %>% group_by(ind) %>%
  reframe(values,ENSEMBL,
          genef2=as.numeric(factor(values,levels=unique(values)))) %>%
  left_join(dataperc_Resc2_filt,by=c("ENSEMBL"="row")) %>%
  ggplot(aes(x=as.numeric(genef2),y=ind))+
  geom_tile(aes(fill=realreascue2), color="white",linewidth=0.5)+
  geom_text(aes(label=values), color="white", size=2.5, angle=45) +
  scale_fill_gradientn(colours = c("white","#FEF0D9","#FDCC8A",
                                             "#FC8D59","#E34A33","#B30000",
                                             "#99004d","#99004d",
                                             "#800080","#800080",
                                             "#ff00ff","#ff00ff"),
                       breaks=c(0,0.2,0.4,0.6,0.8,1,1.5,2,2.5),
                       limits=c(0,3),
                                   name="Real Rescue Ratio", na.value = "#b1b269")+
  theme_cowplot(10)+
  scale_y_discrete(limits=rev)+
  scale_x_continuous(expand=c(0,0)) + 
  guides(fill = guide_colourbar(barheight = 0.5, barwidth = 15,title.position="top"))+
  theme(axis.line.x = element_blank(), axis.title = element_blank(),
        axis.text.x = element_blank(), axis.ticks = element_blank(), 
        axis.line.y = element_blank(), legend.position = "bottom",
        legend.direction = "horizontal", axis.text.y=element_blank())



cplot<-plot_grid(a,b,ncol = 2,align = "h")
cplot
ggsave(cplot,filename="Detailled_BP_Rescue.pdf",device = "pdf",width = 13,height = 5)

```

Here is a similar plot for the results from MF. 

```{r,fig.width=13, fig.height=5}

a<-averplpt_MF %>% ungroup()%>%
  mutate(Description=factor(Description,levels=rev(Description)),
         p.adjust=ifelse(p.adjust<0.00001,0.00001,p.adjust))%>%
  ggplot(aes(x=Count, y=Description))+
  geom_point(aes(color=-log10(p.adjust), size=-log10(p.adjust)))+
  scale_color_viridis_c(direction = -1,lim=c(0,5))+
  theme_cowplot()+
  scale_y_discrete(position = "right")+
  scale_x_continuous(breaks = seq(6,16,by=2))+
  facet_grid(parentTermFact~.,scales = "free", space = "free", switch = "y")+
  theme(axis.title.y = element_blank(), legend.position = "bottom",legend.direction = "horizontal", legend.box = "vertical")
  

b<-genes2plp2t_MF %>% group_by(ind) %>%
  reframe(values,ENSEMBL,
          genef2=as.numeric(factor(values,levels=unique(values)))) %>%
  left_join(averplpt_MF[, c("Description","parentTermFact")], by=c("ind"="Description")) %>%
  left_join(dataperc_Resc2_filt,by=c("ENSEMBL"="row")) %>%
  ggplot(aes(x=as.numeric(genef2),y=ind))+
  geom_tile(aes(fill=realreascue2), color="white",linewidth=0.5)+
  geom_text(aes(label=values), color="white", size=2.5, angle=45) +
  scale_fill_gradientn(colours = c("white","#FEF0D9","#FDCC8A",
                                             "#FC8D59","#E34A33","#B30000",
                                             "#99004d","#99004d",
                                             "#800080","#800080",
                                             "#ff00ff","#ff00ff"),
                       breaks=c(0,0.2,0.4,0.6,0.8,1,1.5,2,2.5),
                       limits=c(0,3),
                                   name="Real Rescue Ratio", na.value = "#b1b269")+
  theme_cowplot(10)+
  scale_y_discrete(limits=rev)+
  scale_x_continuous(expand=c(0,0)) + 
  facet_grid(parentTermFact~.,scales = "free", space = "free", switch = "y")+
  guides(fill = guide_colourbar(barheight = 0.5, barwidth = 15,title.position="top"))+
  theme(axis.line.x = element_blank(), axis.title = element_blank(),
        axis.text.x = element_blank(), axis.ticks = element_blank(), 
        axis.line.y = element_blank(), legend.position = "bottom",
        legend.direction = "horizontal", axis.text.y=element_blank(),
        strip.background = element_blank(),strip.text = element_blank())


cplot<-plot_grid(a,b,ncol = 2,align = "h", rel_widths = c(1,0.7))
cplot
ggsave(cplot,filename="Detailled_MF_Rescue.pdf",device = "pdf",width = 13,height = 5)
```


We can the plot all genes from a specific GO term and since there is a particular inetrest in the term "actomyosin structure organization" here it is (\*yellow color represent genes that were excluded because they do not showed abs(log2FC) \> 0. 25 in KO vs WT Veh):

```{r,fig.width=10, fig.height=10}

#GO:0031032 = actomyosin structure organization

GO_DATA <- clusterProfiler:::get_GO_data(org.Mm.eg.db, "BP", "ENSEMBL")
qExtID2TermID <- DOSE:::EXTID2TERMID(dataperc_Resc$row, GO_DATA)
qTermID <- unlist(qExtID2TermID)
qExtID2TermID.df <- data.frame(extID = rep(names(qExtID2TermID), 
        times = lapply(qExtID2TermID, length)), termID = qTermID)

qExtID2TermID.df %>% filter(termID=="GO:0031032") %>%
  left_join(dataperc_Resc2_filt ,by=c("extID"="row")) %>% 
  arrange(realreascue2) %>% mutate(rid=row_number()-1, col=((rid)%%15), row=rid%/%15) %>%
  left_join(geneName, by=c("extID"="ENSEMBL"))%>%group_by(extID) %>% slice_head(n = 1)%>%
  mutate(realreascue2=ifelse(realreascue2< -3,-3,realreascue2),
         realreascue2=ifelse(realreascue2>3,3,realreascue2))%>%
  ggplot(aes(x=col,y=row))+
  geom_tile(aes(color=class),fill="white",width=0.95, height=0.95, linewidth=1)+
  geom_tile(aes(fill=realreascue2),color="white",width=0.85, height=0.85, linewidth=0.5)+
  geom_text(aes(label=SYMBOL), color="black", size=2.5, angle=45) +
  scale_fill_gradientn(colours = c("#00ffff","#00ffff",
                                   "#008080","#008080",
                                   "#006D2C","#006D2C",
                                   "#31A354","#74C476",
                                   "#A1D99B","#C7E9C0","#EDF8E9",
                                   "white",
                                   "#FEF0D9","#FDCC8A",
                                   "#FC8D59","#E34A33","#B30000",
                                   "#99004d","#99004d",
                                   "#800080","#800080",
                                   "#ff00ff","#ff00ff"),
                       breaks=seq(from=-2.5,to=2.5,by=0.5), #c(-2.5,-2,-1.5,-1,-0.8,-0.6,-0.4,-0.2,0,0.2,0.4,0.6,0.8,1,1.5,2,2.5),
                       labels=seq(from=-2.5,to=2.5,by=0.5),
                       limits=c(-3,3),
                                   name="Real Rescue Ratio", na.value = "yellow")+
  theme_cowplot(10)+
  scale_y_continuous(expand=c(0,0))+
  scale_y_reverse()+
  ggtitle("actomyosin structure organization (GO:0031032)")+
  scale_x_continuous(expand=c(0,0))+ 
  scale_color_manual(values=c("KO Changes"="firebrick1", "KO Overreaction"="royalblue",
                              "KO rescue"="#00ba4b", "Others"="white"),na.value = "white",
                     name="Expression Pattern")+
  guides(fill = guide_colourbar(barheight = 0.5, barwidth = 40,title.position="top"),
         color=guide_legend(title.position="top"))+
  theme(axis.line = element_blank(), axis.title = element_blank(),
        axis.text = element_blank(), axis.ticks = element_blank(), 
        legend.position = "bottom",
        legend.direction = "horizontal",legend.box="vertical")


```

We can additionally check KEGG pathways. Here are 3 examples, one is the Hippo signaling pathway and the others two where ROCK is involved:

```{r}
dataperc_Resc_temp<-dataperc_Resc2_filt %>%
                      left_join(geneName, by=c("row"="ENSEMBL")) %>%
                      select(ENTREZID,realreascue2) %>%
                      group_by(ENTREZID) %>% reframe(realreascue2=mean(realreascue2)) %>%
                      filter(ENTREZID != '') %>% column_to_rownames("ENTREZID")

# dataperc_Resc_temp<-setNames(dataperc_Resc_temp$percrecue,rownames(dataperc_Resc_temp))
# dataperc_Resc_temp<-sort(dataperc_Resc_temp)



pathview(gene.data =dataperc_Resc_temp,
         pathway.id ="04390", split.group = F,node.sum="mean",
                   species = "mmu", out.suffix = "_RescueRatio", kegg.native = T,limit = c(-3,3),
                   kegg.dir = ".",na.col = "yellow",
                   bins = list("gene"=50,"cpd"=50),
                   low=list("gene"="#006D2C","cpd"="#006D2C"),
                   mid=list("gene"="white","cpd"="white"),
                   high=list("gene"="#B30000","cpd"="#B30000"))


pathview(gene.data =dataperc_Resc_temp,
         pathway.id ="04810", split.group = F,node.sum="mean",
                   species = "mmu", out.suffix = "_RescueRatio", kegg.native = T,limit = c(-3,3),
                   kegg.dir = ".",na.col = "yellow",
                   bins = list("gene"=50,"cpd"=50),
                   low=list("gene"="#006D2C","cpd"="#006D2C"),
                   mid=list("gene"="white","cpd"="white"),
                   high=list("gene"="#B30000","cpd"="#B30000"))

pathview(gene.data =dataperc_Resc_temp,
         pathway.id ="04310", split.group = F,node.sum="mean",
                   species = "mmu", out.suffix = "_RescueRatio", kegg.native = T,limit = c(-3,3),
                   kegg.dir = ".",na.col = "yellow",
                   bins = list("gene"=50,"cpd"=50),
                   low=list("gene"="#006D2C","cpd"="#006D2C"),
                   mid=list("gene"="white","cpd"="white"),
                   high=list("gene"="#B30000","cpd"="#B30000"))

```

![](mmu04390._RescueRatio.png)

![](mmu04810._RescueRatio.png)

![](mmu04310._RescueRatio.png)

::: callout-caution
Rho is colored yellow because KEGG assumes in this pathways only Rhoa is acting and the expression of Rhoa does not need to be rescued.
:::

```{r, fig.height=4, fig.width=4}
vst4plts %>% filter(SYMBOL%in%c("Rhoa")) %>%
  ggplot(aes(x=Group, y=TPM)) +
  geom_boxplot(aes(fill=Group),outlier.shape = NA)+
  geom_jitter(width = 0.2,height = 0) +
  facet_wrap(~SYMBOL, scales = "free") +
  labs(y="VSD")+
  #scale_y_continuous(trans='log10')+
  scale_fill_manual(values = colorList$Group_neu,guide="none")+
  theme_cowplot(12)+
  theme(axis.text.x = element_text(angle = 30,hjust = 1),
        axis.title.x  = element_blank())
```

## Model

Based on the results shown here I could infer this model

![](images/model.png) This might be too **speculative**.

## KO animals

Talking with Fede about this she suggested to take a look at the mouse hippocampus data. As you know I could not find significant differential expressed genes between KO and WT mice.

```{r}
coldata_raw_stella<-read.delim("../RNA_Seq/Adult_Behavior/samples.txt", row.names = 1)
coldata_stella<-coldata_raw_stella %>% as_tibble() %>% dplyr::select(SampleName,Sex,Genotype,Cross,Mapping_Rate,Age)%>%
                  mutate(Genotype=factor(Genotype,levels=c("WT","KO")),
                         SampleName=factor(SampleName,levels = c(paste0("KO",1:5,"_Adult_Hippo"),
                                                                 paste0("WT",1:5,"_Adult_Hippo"))))

gcounts_stella<-read.csv("../RNA_Seq/Adult_Behavior/Salmon_Gene_table_counts.csv",row.names = 1)
gcounts_stella<-gcounts_stella[,coldata_stella$SampleName]
minrep_stella<-3
minreads_stella<-10

gcounts_stella_filt<-gcounts_stella[rowSums(gcounts_stella>=minreads)>=minrep,]


dds_Stella<-DESeqDataSetFromMatrix(gcounts_stella_filt,
                                    colData = data.frame(coldata_stella,row.names = "SampleName"),
                                    #design = ~ Sex+Age+Genotype)
                                    design = ~ Genotype)
dds_Stella$Genotype<-relevel(dds_Stella$Genotype, ref = "WT")
dds_Stella<-DESeq(dds_Stella)

stella_kovswt<- results(dds_Stella, name="Genotype_KO_vs_WT",filterFun=ihw,cooksCutoff = FALSE) 
stella_kovswt_lfs<- lfcShrink(dds_Stella, coef="Genotype_KO_vs_WT", type="apeglm",res = stella_kovswt) %>% as_tibble(rownames = "row")


rank<-stella_kovswt$stat
names(rank)<-rownames(stella_kovswt)
rank<-sort(rank,decreasing = T)

rank_lfc<-stella_kovswt$log2FoldChange
names(rank_lfc)<-rownames(stella_kovswt)
rank_lfc<-sort(rank_lfc,decreasing = T)

```

### GSEA

#### Stats

The first approach was to perform a GSEA on the "stats" from which p-value is calculated. ~~Positives values would represent lower p-values~~. Extreme values represent lower p-values and the sign of of it, if gene is more expressed in KO (positive) or WT (negative). I tested here 6 lists, rescue genes, ROCKi insensitive KO genes altered and the merge of these two, for up and down patterns.

```{r}
# t2g<-rbind(data.frame("Term"="RescueList","gene"=rescuegenes),
#            data.frame("Term"="KOList","gene"=DEG4gen),
#            data.frame("Term"="Both","gene"=c(rescuegenes,DEG4gen)))

t2g<-rbind(data.frame("Term"="RescueList_up","gene"=rescuegenes_up),
           data.frame("Term"="RescueList_down","gene"=rescuegenes_down),
           data.frame("Term"="KOList_up","gene"=DEG4gen_pos),
           data.frame("Term"="KOList_neg","gene"=DEG4gen_neg),
           data.frame("Term"="Both_up","gene"=c(rescuegenes_up,DEG4gen_pos)),
           data.frame("Term"="Both_down","gene"=c(rescuegenes_down,DEG4gen_neg)))

gsea_res<-GSEA( TERM2GENE = t2g,rank,eps = 0,by = 'fgsea',pvalueCutoff = Inf,maxGSSize = 600,nPermSimple=10000)


gsea_res@result[,3:7] %>% datatable(extensions = "Buttons",
          options = list(paging = TRUE,
                           scrollX=TRUE, 
                           searching = TRUE,
                           ordering = TRUE,
                           dom = 'Bfrtip',
                           buttons = c( 'csv', 'excel'),
                           pageLength=10, 
                           lengthMenu=c(3,5,10) ))
```

```{r}
gseaplot(gsea_res, geneSetID = 1, by = "runningScore",title = "Both Down")
```

#### Fold Changes

Then I started testing independently up/down lists but here KO mice data used were log2 fold change between KO and WT. Positive values represent higher in KO than in WT.

```{r}

gsea_res<-GSEA( TERM2GENE = t2g,rank_lfc,eps = 0,by = 'fgsea',pvalueCutoff = Inf,maxGSSize = 600,nPermSimple=10000)

gsea_res@result[,3:7] %>% datatable(extensions = "Buttons",
          options = list(paging = TRUE,
                           scrollX=TRUE, 
                           searching = TRUE,
                           ordering = TRUE,
                           dom = 'Bfrtip',
                           buttons = c( 'csv', 'excel'),
                           pageLength=5, 
                           lengthMenu=c(3,5,10) ))
```

```{r}
gseaplot(gsea_res, geneSetID = 1, by = "runningScore",title = "Both_down")
```

```{r}
gseaplot(gsea_res, geneSetID = 2, by = "runningScore",title = "Both_up")
```

WE HAVE SIGNIFICANT RESULTS!!!! The problem comes when comparing the sign of the enrichment score, If everything went perfect we would assume that downregulated genes would have been enriched in the downregulated genes of KO mice, and viceversa, but the opposite is happening.

The direct comparison is with the genes found differentially expressed ROCKi independant.

```{r}
genes2use<-names(rank_lfc)[names(rank_lfc) %in% DEG4gen]


genresults %>%  dplyr::filter(IDs %in% genes2use) %>% mutate(KO_Neu=rank_lfc[IDs]) %>% ggplot(aes(x=log2FoldChange, y=KO_Neu))+ labs(y="KO Mice Log2Foldchange",x="KO 'neural' Log2 Foldchange" )+geom_point()+ geom_smooth(method = "lm") +stat_cor(method = "pearson")



```

Stats correspond to pearson correlation.

```{r}
data2send<-list("KOvsWT_Veh"=kovswt_Veh_res_lfc,
                "ROCKivsVeh_WT"=rvsv_WT_res_lfc,
                "ROCKivsVeh_KO"=rvsv_KO_res_lfc,
                "Genotype"=genresults,
                "Treatemt"=treatresults,
                "MergingComp"=all_Res)
openxlsx::write.xlsx(data2send,"Stats_ROCKi_report.xlsx")

sessionInfo()
```
